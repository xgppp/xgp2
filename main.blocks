<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Gi}nNz/h7p)G_n4LXo,%" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="V})zYF^?)Il|+-~4_Ts1" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace microbit_carx {" line1="    let _DEBUG: boolean = false" line2="    const debug = (msg: string) =&gt; {" line3="        if (_DEBUG === true) {" line4="            serial.writeLine(msg)" line5="        }" line6="    }" line7="" line8="    const MIN_CHIP_ADDRESS = 0x40" line9="    const MAX_CHIP_ADDRESS = MIN_CHIP_ADDRESS + 62" line10="    const chipResolution = 4096;" line11="    const PrescaleReg = 0xFE //the prescale register address" line12="    const modeRegister1 = 0x00 // MODE1" line13="    const modeRegister1Default = 0x01" line14="    const modeRegister2 = 0x01 // MODE2" line15="    const modeRegister2Default = 0x04" line16="    const sleep = modeRegister1Default | 0x10; // Set sleep bit to 1" line17="    const wake = modeRegister1Default &amp; 0xEF; // Set sleep bit to 0" line18="    const restart = wake | 0x80; // Set restart bit to 1" line19="    const allChannelsOnStepLowByte = 0xFA // ALL_LED_ON_L" line20="    const allChannelsOnStepHighByte = 0xFB // ALL_LED_ON_H" line21="    const allChannelsOffStepLowByte = 0xFC // ALL_LED_OFF_L" line22="    const allChannelsOffStepHighByte = 0xFD // ALL_LED_OFF_H" line23="    const PinRegDistance = 4" line24="    const channel0OnStepLowByte = 0x06 // LED0_ON_L" line25="    const channel0OnStepHighByte = 0x07 // LED0_ON_H" line26="    const channel0OffStepLowByte = 0x08 // LED0_OFF_L" line27="    const channel0OffStepHighByte = 0x09 // LED0_OFF_H" line28="" line29="    const hexChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']" line30="" line31="    export enum PinNum {" line32="        Pin0 = 0," line33="        Pin1 = 1," line34="        Pin2 = 2," line35="        Pin3 = 3," line36="        Pin4 = 4," line37="        Pin5 = 5," line38="        Pin6 = 6," line39="        Pin7 = 7," line40="        Pin8 = 8," line41="        Pin9 = 9," line42="        Pin10 = 10," line43="        Pin11 = 11," line44="        Pin12 = 12," line45="        Pin13 = 13," line46="        Pin14 = 14," line47="        Pin15 = 15," line48="    }" line49="" line50="    export enum LEDNum {" line51="        LED0 = 0," line52="        LED1 = 1," line53="        LED2 = 2," line54="        LED3 = 3," line55="        LED4 = 4," line56="        LED5 = 5," line57="        LED6 = 6," line58="        LED7 = 7," line59="        LED8 = 8," line60="        LED9 = 9," line61="        LED10 = 10," line62="        LED11 = 11," line63="        LED12 = 12," line64="        LED13 = 13," line65="        LED14 = 14," line66="        LED15 = 15," line67="    }" line68="" line69="    export enum Motor {" line70="        MotorLF = 0,    //FRONT" line71="        MotorRF = 1," line72="        MotorLR = 2,    //REAR" line73="        MotorRR = 3," line74="    }" line75="" line76="    export class ServoConfigObject {" line77="        id: number;" line78="        pinNumber: number;" line79="        minOffset: number;" line80="        midOffset: number;" line81="        maxOffset: number;" line82="        position: number;" line83="    }" line84="" line85="    export const DefaultServoConfig = new ServoConfigObject();" line86="    DefaultServoConfig.pinNumber = -1" line87="    DefaultServoConfig.minOffset = 5" line88="    DefaultServoConfig.midOffset = 15" line89="    DefaultServoConfig.maxOffset = 25" line90="    DefaultServoConfig.position = 90" line91="" line92="    export class ServoConfig {" line93="        id: number;" line94="        pinNumber: number;" line95="        minOffset: number;" line96="        midOffset: number;" line97="        maxOffset: number;" line98="        position: number;" line99="        constructor(id: number, config: ServoConfigObject) {" line100="            this.id = id" line101="            this.init(config)" line102="        }" line103="" line104="        init(config: ServoConfigObject) {" line105="            this.pinNumber = config.pinNumber &gt; -1 ? config.pinNumber : this.id - 1" line106="            this.setOffsetsFromFreq(config.minOffset, config.maxOffset, config.midOffset)" line107="            this.position = -1" line108="        }" line109="" line110="        debug() {" line111="            const params = this.config()" line112="" line113="            for (let j = 0; j &lt; params.length; j = j + 2) {" line114="                debug(`Servo[${this.id}].${params[j]}: ${params[j + 1]}`)" line115="            }" line116="        }" line117="" line118="        setOffsetsFromFreq(startFreq: number, stopFreq: number, midFreq: number = -1): void {" line119="            this.minOffset = startFreq // calcFreqOffset(startFreq)" line120="            this.maxOffset = stopFreq // calcFreqOffset(stopFreq)" line121="            this.midOffset = midFreq &gt; -1 ? midFreq : ((stopFreq - startFreq) / 2) + startFreq" line122="        }" line123="" line124="        config(): string[] {" line125="            return [" line126="                'id', this.id.toString()," line127="                'pinNumber', this.pinNumber.toString()," line128="                'minOffset', this.minOffset.toString()," line129="                'maxOffset', this.maxOffset.toString()," line130="                'position', this.position.toString()," line131="            ]" line132="        }" line133="    }" line134="" line135="    export class ChipConfig {" line136="        address: number;" line137="        servos: ServoConfig[];" line138="        freq: number;" line139="        constructor(address: number = 0x40, freq: number = 50) {" line140="            this.address = address" line141="            this.servos = [" line142="                new ServoConfig(1, DefaultServoConfig)," line143="                new ServoConfig(2, DefaultServoConfig)," line144="                new ServoConfig(3, DefaultServoConfig)," line145="                new ServoConfig(4, DefaultServoConfig)," line146="                new ServoConfig(5, DefaultServoConfig)," line147="                new ServoConfig(6, DefaultServoConfig)," line148="                new ServoConfig(7, DefaultServoConfig)," line149="                new ServoConfig(8, DefaultServoConfig)," line150="                new ServoConfig(9, DefaultServoConfig)," line151="                new ServoConfig(10, DefaultServoConfig)," line152="                new ServoConfig(11, DefaultServoConfig)," line153="                new ServoConfig(12, DefaultServoConfig)," line154="                new ServoConfig(13, DefaultServoConfig)," line155="                new ServoConfig(14, DefaultServoConfig)," line156="                new ServoConfig(15, DefaultServoConfig)," line157="                new ServoConfig(16, DefaultServoConfig)" line158="            ]" line159="            this.freq = freq" line160="            init(address, freq)" line161="        }" line162="    }" line163="" line164="    export const chips: ChipConfig[] = []" line165="" line166="    export enum Functions {" line167="        //% block=&quot;NoFunction&quot;" line168="        NoFunction," line169="        //% block=&quot;Facial recognition&quot;" line170="        FaceDetect = 1," line171="        //% block=&quot;Object detection&quot;" line172="        ObjectDetect," line173="        //% block=&quot;Classification&quot;" line174="        Classification," line175="        //% block=&quot;FeatureLearning&quot;" line176="        FeatureLearning," line177="        //% block=&quot;ColorDetect&quot;" line178="        ColorDetect," line179="        //% block=&quot;LineFollowing&quot;" line180="        LineFollowing," line181="        //% block=&quot;AprilTag&quot;" line182="        AprilTag," line183="        //% block=&quot;QrcodeScan&quot;" line184="        QrcodeScan," line185="        //% block=&quot;BarcodeScan&quot;" line186="        BarcodeScan," line187="        //% block=&quot;Number Recognition&quot;" line188="        NumberRecognition," line189="        //% block=&quot;Landmark Recognition&quot;" line190="        LandmarkRecognition," line191="    }" line192="" line193="    export enum Landmarks {" line194="        //% bock=&quot;NoLandmark&quot;" line195="        NoLandmark," line196="        //% block=&quot;Go forward&quot;" line197="        GoForward = 1," line198="        //% block=&quot;Turn left&quot;" line199="        TurnLeft = 2," line200="        //% block=&quot;Turn right&quot;" line201="        TurnRight = 3," line202="        //% block=&quot;Turn About&quot;" line203="        TurnAbout = 4," line204="        //% block=&quot;Stop&quot;" line205="        Stop = 5," line206="    }" line207="" line208="    export enum Objects {" line209="        //% block=&quot;Aeroplane&quot;" line210="        Aeroplane = 1," line211="        //% block=&quot;Bicycle&quot;" line212="        Bicycle," line213="        //% block=&quot;Bird&quot;" line214="        Bird," line215="        //% block=&quot;Boar&quot;" line216="        Boar," line217="        //% block=&quot;Bootle&quot;" line218="        Bootle," line219="        //% block=&quot;Bus&quot;" line220="        Bus," line221="        //% block=&quot;Car&quot;" line222="        Car," line223="        //% block=&quot;Cat&quot;" line224="        Cat," line225="        //% block=&quot;Chair&quot;" line226="        Chair," line227="        //% block=&quot;Cow&quot;" line228="        Cow," line229="        //% block=&quot;Diningtable&quot;" line230="        Diningtable," line231="        //% block=&quot;Dog&quot;" line232="        Dog," line233="        //% block=&quot;Horse&quot;" line234="        Horse," line235="        //% block=&quot;Motorbike&quot;" line236="        Motorbike," line237="        //% block=&quot;Person&quot;" line238="        Person," line239="        //% block=&quot;Pottedplant&quot;" line240="        Pottedplant," line241="        //% block=&quot;Sheep&quot;" line242="        Sheep," line243="        //% block=&quot;Sofa&quot;" line244="        Sofa," line245="        //% block=&quot;Train&quot;" line246="        Train," line247="        //% block=&quot;TvMonitorn&quot;" line248="        TvMonitorn" line249="    }" line250="" line251="    export enum Options {" line252="        //% block=&quot;X&quot;" line253="        Pos_X = 0," line254="        //% block=&quot;Y&quot;" line255="        Pos_Y = 0x02," line256="        //% block=&quot;Width&quot;" line257="        Width = 0x04," line258="        //% block=&quot;Height&quot;" line259="        Height = 0x06" line260="    }" line261="" line262="    export enum Obj_Options {" line263="        //% block=&quot;X&quot;" line264="        Pos_X = 0," line265="        //% block=&quot;Y&quot;" line266="        Pos_Y = 0x02," line267="        //% block=&quot;Width&quot;" line268="        Width = 0x04," line269="        //% block=&quot;Height&quot;" line270="        Height = 0x06," line271="        //% block=&quot;Confidence&quot;" line272="        Confidence = 0x08" line273="    }" line274="" line275="    export enum Line_Options {" line276="        //% block=&quot;Start X&quot;" line277="        Start_X = 0x00," line278="        //% block=&quot;Start Y&quot;" line279="        Start_Y = 0x02," line280="        //% block=&quot;End X&quot;" line281="        END_X = 0x04," line282="        //% block=&quot;End Y&quot;" line283="        END_Y = 0x06," line284="        //% block=&quot;Angle&quot;" line285="        Angle = 0x08," line286="        //% block=&quot;Offset&quot;" line287="        Offset = 0x0A" line288="    }" line289="" line290="    export enum AprilTag_Options {" line291="        //% block=&quot;Center X&quot;" line292="        Pos_X = 0x00," line293="        //% block=&quot;Center Y&quot;" line294="        Pos_Y = 0x02," line295="        //% block=&quot;W&quot;" line296="        Width = 0x04," line297="        //% block=&quot;H&quot;" line298="        Height = 0x06," line299="        //% block=&quot;X Translation&quot;" line300="        X_T = 0x08," line301="        //% block=&quot;X Rotation&quot;" line302="        X_R = 0x0A," line303="        //% block=&quot;Y Translation&quot;" line304="        Y_T = 0x0C," line305="        //% block=&quot;Y Rotation&quot;" line306="        Y_R = 0x0E," line307="        //% block=&quot;Z Translation&quot;" line308="        Z_T = 0x10," line309="        //% block=&quot;Z Rotation&quot;" line310="        Z_R = 0x12," line311="    }" line312="" line313="    export enum LED_STATE {" line314="        //% block=&quot;ON&quot;" line315="        ON = 1," line316="        //% block=&quot;OFF&quot;" line317="        OFF = 0" line318="    }" line319="" line320="    export enum DEV_ADDR {" line321="        //% block=&quot;0x32&quot;" line322="        x32 = 0x32," line323="        //% block=&quot;0x21&quot;" line324="        x21 = 0x21," line325="        //% block=&quot;0x22&quot;" line326="        x22 = 0x22," line327="        //% block=&quot;0x23&quot;" line328="        x23 = 0x23," line329="        //% block=&quot;0x24&quot;" line330="        x24 = 0x24," line331="        //% block=&quot;0x31&quot;" line332="        x31 = 0x31," line333="        //% block=&quot;0x33&quot;" line334="        x33 = 0x33," line335="        //% block=&quot;0x34&quot;" line336="        x34 = 0x34," line337="        //% block=&quot;0x41&quot;" line338="        x41 = 0x41," line339="        //% block=&quot;0x42&quot;" line340="        x42 = 0x42," line341="        //% block=&quot;0x43&quot;" line342="        x43 = 0x43," line343="        //% block=&quot;0x44&quot;" line344="        x44 = 0x44," line345="        //% block=&quot;0x51&quot;" line346="        x51 = 0x45," line347="        //% block=&quot;0x52&quot;" line348="        x52 = 0x52," line349="        //% block=&quot;0x53&quot;" line350="        x53 = 0x53," line351="        //% block=&quot;0x54&quot;" line352="        x54 = 0x54," line353="    }" line354="" line355="    let Current = Functions.NoFunction;" line356="    let ResultBuf: Buffer;" line357="    let WONDERCAM_I2C_ADDR = 0x32" line358="" line359="    function i2cwrite(reg: number, value: number) {" line360="        let buf = pins.createBuffer(3)" line361="        buf.setNumber(NumberFormat.UInt8LE, 0, reg &amp; 0xFF)" line362="        buf.setNumber(NumberFormat.UInt8LE, 1, (reg &gt;&gt; 8) &amp; 0xFF)" line363="        buf.setNumber(NumberFormat.UInt8LE, 2, value &amp; 0xFF)" line364="        pins.i2cWriteBuffer(WONDERCAM_I2C_ADDR, buf)" line365="    }" line366="" line367="    function i2creadtobuf(reg: number, length: number): Buffer {" line368="        let buf2 = pins.createBuffer(2)" line369="        buf2.setNumber(NumberFormat.UInt8LE, 0, reg &amp; 0xFF)" line370="        buf2.setNumber(NumberFormat.UInt8LE, 1, (reg &gt;&gt; 8) &amp; 0xFF)" line371="        pins.i2cWriteBuffer(WONDERCAM_I2C_ADDR, buf2)" line372="        return pins.i2cReadBuffer(WONDERCAM_I2C_ADDR, length)" line373="    }" line374="" line375="    function i2creadnum(reg: number): number {" line376="        let buf3 = i2creadtobuf(reg, 1)" line377="        return buf3.getNumber(NumberFormat.UInt8LE, 0)" line378="    }" line379="" line380="    /**" line381="         * TODO:初始化I2C， 初始化WonderCam" line382="         * @param dev_addr i2c address, eg: DEV_ADDR.x32" line383="         */" line384="    //% weight=180" line385="    //% block=&quot;Initialize WonderCam at |$dev_addr|&quot;" line386="    export function wondercam_init(dev_addr = DEV_ADDR.x32): void {" line387="        WONDERCAM_I2C_ADDR = dev_addr" line388="        while (i2creadnum(0) != 'v'.charCodeAt(0)) {" line389="            basic.showString(&quot;E&quot;)" line390="        }" line391="        basic.clearScreen()" line392="    }" line393="" line394="    /**" line395="     * TODO: 获取WonderCam正在运行的功能，返回当前运行功能的序号" line396="     */" line397="    //% weight=145" line398="    //% block=&quot;The running function&quot;" line399="    export function CurrentFunc(): Functions {" line400="        return i2creadnum(0x0035)" line401="    }" line402="" line403="    /**" line404="     * TODO: 判断当前运行的功能是否是某个功能" line405="     */" line406="    //% weight=149" line407="    //% block=&quot;Is the running function |$func|?&quot;" line408="    //% func.defl=Functions.FaceDetect" line409="    export function CurrentFuncIs(func: Functions): boolean {" line410="        if (i2creadnum(0x0035) == func) {" line411="            return true" line412="        }" line413="        return false" line414="    }" line415="" line416="    /**" line417="     * TODO: 获取不同功能对应的功能序号" line418="     */" line419="    //% weight=1" line420="    //% block=&quot;$func&quot;" line421="    //% func.defl=Functions.FaceDetect" line422="    export function FunctoNum(func: Functions): number {" line423="        return func" line424="    }" line425="" line426="    /**" line427="     * TODO: 切换功能" line428="     */" line429="    //% weight=140" line430="    //% block=&quot;Switch to $newfunc&quot;" line431="    //% newfunc.defl=Functions.FaceDetect" line432="    export function ChangeFunc(newfunc: Functions): void {" line433="        let count = 0;" line434="        i2cwrite(0x0035, newfunc);" line435="        basic.pause(100)" line436="        while (true) {" line437="            if (CurrentFuncIs(newfunc)) {" line438="                break" line439="            } else {" line440="                if (count &gt;= 80) {" line441="                    break;" line442="                }" line443="                basic.pause(50)" line444="                count++" line445="            }" line446="        }" line447="    }" line448="" line449="    /**" line450="     * TODO: 开关LED" line451="     */" line452="    //% weight=100" line453="    //% block=&quot;Turn |$newstate| led&quot;" line454="    //% newstate.defl=LED_STATE.ON" line455="    export function TurnOnOrOffLed(newstate: LED_STATE): void {" line456="        i2cwrite(0x0030, newstate);" line457="    }" line458="" line459="    /**" line460="     * TODO: 设置LED亮度" line461="     */" line462="    //% weight=90" line463="    //% block=&quot;Set led brightness as $newlevel&quot;" line464="    //% newlevel.defl=100 newlevel.min=0 newlevel.max=100" line465="    export function SetLedBrightness(newlevel: number): void {" line466="        i2cwrite(0x0031, newlevel);" line467="    }" line468="" line469="    /**" line470="     * TODO: 更新WonderCam的处理结果" line471="     */" line472="    //% weight=120" line473="    //% block=&quot;Update and get results&quot;" line474="    export function UpdateResult(): void {" line475="        let func = CurrentFunc()" line476="        switch (func) {" line477="            case Functions.FaceDetect: //人脸识别 结果地址" line478="                ResultBuf = i2creadtobuf(0x0400, 512)" line479="                Current = Functions.FaceDetect;" line480="                break;" line481="            case Functions.ObjectDetect: //物品识别 结果地址" line482="                ResultBuf = i2creadtobuf(0x0800, 512)" line483="                Current = Functions.ObjectDetect" line484="                break;" line485="            case Functions.Classification: //图像分类 结果地址" line486="                ResultBuf = i2creadtobuf(0x0C00, 128)" line487="                Current = Functions.Classification" line488="                break;" line489="            case Functions.NumberRecognition: //图像分类 结果地址" line490="                ResultBuf = i2creadtobuf(0x0D00, 128)" line491="                Current = Functions.NumberRecognition" line492="                break;" line493="            case Functions.LandmarkRecognition: //图像分类 结果地址" line494="                ResultBuf = i2creadtobuf(0x0D80, 128)" line495="                Current = Functions.LandmarkRecognition" line496="                break;" line497="            case Functions.FeatureLearning:  //特征学习 结果地址" line498="                ResultBuf = i2creadtobuf(0x0E00, 128)" line499="                Current = Functions.FeatureLearning" line500="                break;" line501="            case Functions.ColorDetect: // 颜色识别 结果地址" line502="                ResultBuf = i2creadtobuf(0x1000, 400)" line503="                Current = Functions.ColorDetect" line504="                break;" line505="            case Functions.LineFollowing: //视觉巡线 结果地址" line506="                ResultBuf = i2creadtobuf(0x1400, 256)" line507="                Current = Functions.LineFollowing" line508="                break;" line509="            case Functions.AprilTag:" line510="                ResultBuf = i2creadtobuf(0x1E00, 512);" line511="                Current = Functions.AprilTag" line512="                break;" line513="            case Functions.QrcodeScan: //QRCODE 结果地址" line514="                ResultBuf = i2creadtobuf(0x1800, 512)" line515="                Current = Functions.QrcodeScan" line516="                break;" line517="            case Functions.BarcodeScan: //BAR CODE 结果地址" line518="                ResultBuf = i2creadtobuf(0x1C00, 512)" line519="                Current = Functions.BarcodeScan" line520="                break;" line521="            default:" line522="                Current = Functions.NoFunction" line523="                break;" line524="        }" line525="    }" line526="" line527="    /**" line528="     * TODO: 是否检测到了人脸" line529="     */" line530="    //% weight=160" line531="    //% block=&quot;Is any face detected?&quot;" line532="    //% subcategory=&quot;Facial recognition&quot;" line533="    export function IsDetectFace(): boolean {" line534="        if (Current == Functions.FaceDetect) {" line535="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, 1) &gt; 0) {" line536="                return true" line537="            }" line538="        }" line539="        return false" line540="    }" line541="" line542="    /**" line543="     * TODO: 获取识别到的人脸个数" line544="     */" line545="    //% weight=150" line546="    //% block=&quot;Total number of detected faces&quot;" line547="    //% subcategory=&quot;Facial recognition&quot;" line548="    //% subcategory.loc.zh=&quot;人脸识别&quot;" line549="    export function FaceNum(): number {" line550="        if (Current == Functions.FaceDetect) {" line551="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 1);" line552="        }" line553="        return 0;" line554="    }" line555="" line556="    /**" line557="     * TODO: 是否识别到已经学习的人脸" line558="     */" line559="    //% weight=140" line560="    //% block=&quot;Is any learned face recognized?&quot;" line561="    //% subcategory=&quot;Facial recognition&quot;" line562="    export function IsDetectedLearnedFace(): boolean {" line563="        if (Current == Functions.FaceDetect) {" line564="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, 2) &gt; 0) {" line565="                return true;" line566="            }" line567="        }" line568="        return false;" line569="    }" line570="" line571="    /**" line572="     * TODO: 获取识别到的已经学习的人脸个数" line573="     */" line574="    //% weight=135" line575="    //% block=&quot;Number of learned faces recognized&quot;" line576="    //% subcategory=&quot;Facial recognition&quot;" line577="    export function LearnedFaceNum(): number {" line578="        if (Current == Functions.FaceDetect) {" line579="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 2);" line580="        }" line581="        return 0;" line582="    }" line583="" line584="    /**" line585="     * TODO: 获取识别到的未学习的人脸个数" line586="     */" line587="    //% weight=130" line588="    //% block=&quot;Is any unlearned face detected?&quot;" line589="    //% subcategory=&quot;Facial recognition&quot;" line590="    export function IsDetectUnLeanedFace(): boolean {" line591="        if (Current == Functions.FaceDetect) {" line592="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, 3) &gt; 0) {" line593="                return true;" line594="            }" line595="        }" line596="        return false;" line597="    }" line598="" line599="    /**" line600="     * TODO: 获取识别到的未学习的人脸个数" line601="     */" line602="    //% weight=120" line603="    //% block=&quot;Number of unlearned faces detected&quot;" line604="    //% subcategory=&quot;Facial recognition&quot;" line605="    export function UnLearnedFaceNum(): number {" line606="        if (Current == Functions.FaceDetect) {" line607="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 3);" line608="        }" line609="        return 0;" line610="    }" line611="" line612="    /**" line613="     * TODO: 是否识别到了指定ID的人脸" line614="     * @param id[1-5] eg: 1" line615="     */" line616="    //% weight=110" line617="    //% block=&quot;Is the face ID:$id recognized&quot;" line618="    //% subcategory=&quot;Facial recognition&quot;" line619="    export function IsDetectedFace(id: number): boolean {" line620="        if (Current == Functions.FaceDetect) {" line621="            for (let i = 4; i &lt; 4 + 29; i++) {  // 逐个对比是否有这个id" line622="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, i) == id) {" line623="                    return true;" line624="                }" line625="            }" line626="        }" line627="        return false;" line628="    }" line629="" line630="    /**" line631="     * TODO: 获返回指定ID的人脸的位置数据。若成功返回数据,失败返回0" line632="     */" line633="    //% weight=95" line634="    //% block=&quot;$opt of face ID: $id&quot;" line635="    //% id.defl=1 id.min=1 id.max=5" line636="    //% opt.defl=Options.Pos_X" line637="    //% subcategory=&quot;Facial recognition&quot;" line638="    export function getlearnedFaceY(opt: Options, id: number): number {" line639="        for (let k = 4; k &lt; 4 + 29; k++) {  // 逐个对比是否有这个id" line640="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, k) == id) {" line641="                let index = k - 4;" line642="                return ResultBuf.getNumber(NumberFormat.Int16LE, (0x30 + opt) + index * 16)" line643="            }" line644="        }" line645="        return 0;" line646="    }" line647="" line648="    /**" line649="     * TODO: 获返回指定Index的未学习的人脸的位置数据。若成功返回数据,失败返回0" line650="     */" line651="    //% weight=13" line652="    //% block=&quot;|$opt| of the no.|$index| unlearned face recognized&quot;" line653="    //% index.defl=1 index.min=1 index.max=20" line654="    //% opt.defl=Options.Pos_X" line655="    //% subcategory=&quot;Facial recognition&quot;" line656="    export function getUnlearnedFaceX(opt: Options, index: number): number {" line657="        let num = 0;" line658="        for (let l = 4; l &lt; 4 + 29; l++) {  // 逐个对比是否有这个id" line659="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, l) == 0xFF) {" line660="                num += 1" line661="                if (num == index) {" line662="                    return ResultBuf.getNumber(NumberFormat.Int16LE, (0x30 + opt) + (l - 4) * 16)" line663="                }" line664="            }" line665="        }" line666="        return 0;" line667="    }" line668="" line669="    /**" line670="     * TODO: 是否识别到了物品" line671="     */" line672="    //% weight=100 block=&quot;Is any object detected?&quot;" line673="    //% subcategory=&quot;Object detection&quot;" line674="    export function IsDetectObject(): boolean {" line675="        if (Current == Functions.ObjectDetect) {" line676="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, 1) &gt; 0) {" line677="                return true" line678="            }" line679="        }" line680="        return false" line681="    }" line682="" line683="    /**" line684="     * TODO: 获取识别到的物品总数" line685="     */" line686="    //% weight=97 blockId=ObjNum block=&quot;Total number of objects detected&quot;" line687="    //% subcategory=&quot;Object detection&quot;" line688="    export function ObjNum(): number {" line689="        if (Current == Functions.ObjectDetect) {" line690="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 1);" line691="        } else {" line692="            return 0;" line693="        }" line694="    }" line695="" line696="    /**" line697="     * TODO: 是否识别到了指定ID的物品" line698="     */" line699="    //% weight=95 blockId=IsDetectedObject block=&quot;Is $id| detected?&quot;" line700="    //% subcategory=&quot;Object detection&quot;" line701="    export function IsDetectedObjectOfId(id: Objects): boolean {" line702="        if (Current == Functions.ObjectDetect) {" line703="            for (let m = 2; m &lt; 2 + 29; m++) {  // 逐个对比是否有这个id" line704="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, m) == id) {" line705="                    return true;" line706="                }" line707="            }" line708="            return false;" line709="        } else {" line710="            return false;" line711="        }" line712="    }" line713="" line714="    /**" line715="     * TODO: 识别到的指定ID的物品的个数" line716="     */" line717="    //% weight=85  block=&quot;Number of |$id| detected&quot;" line718="    //% subcategory=&quot;Object detection&quot;" line719="    export function NumOfDetectedObject(id: Objects): number {" line720="        let num2 = 0;" line721="        if (Current == Functions.ObjectDetect) {" line722="            for (let n = 2; n &lt; 2 + 29; n++) {  // 逐个对比是否有这个id" line723="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, n) == id) {" line724="                    num2 += 1;" line725="                }" line726="            }" line727="        }" line728="        return num2;" line729="    }" line730="" line731="    /**" line732="     * TODO: 获取识别到的指定物品的指定序号的结果的数据" line733="     */" line734="    //% weight=75 block=&quot;|$opt| of the no.|$index| |$id| detected&quot;" line735="    //% opt.defl=Obj_Options.Pos_X" line736="    //% index.defl=1 index.min=1 index.max=10" line737="    //% id.defl=Objects.Aeroplane" line738="    //% subcategory=&quot;Object detection&quot;" line739="    export function getObjectW(opt: Obj_Options, index: number, id: Objects): number {" line740="        let num3 = 0" line741="        let addr = 0" line742="        if (Current == Functions.ObjectDetect) {" line743="            for (let o = 2; o &lt; 2 + 29; o++) {  // 逐个对比是否有这个id" line744="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, o) == id) {" line745="                    num3 += 1" line746="                    if (num3 == index) {" line747="                        return ResultBuf.getNumber(NumberFormat.UInt16LE, (0x30 + opt) + (o - 2) * 16)" line748="                    }" line749="                }" line750="            }" line751="        }" line752="        return 0" line753="    }" line754="" line755="    //图像分类" line756="    /**" line757="     * TODO: 获取置信度最大的ID" line758="     */" line759="    //% weight=82 blockId=MaxConfidenceID block=&quot;The most confident ID&quot;" line760="    //% id.defl=1 id.min=1 id.max=20" line761="    //% subcategory=&quot;Classification&quot;" line762="    export function MaxConfidenceID(): number {" line763="        if (Current == Functions.Classification) {" line764="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01);" line765="        }" line766="        return 0" line767="    }" line768="" line769="    /**" line770="     * TODO: 获取最大的置信度" line771="     */" line772="    //% weight=81 blockId=MaxConfidence block=&quot;The most confident&quot;" line773="    //% id.defl=1 id.min=1 id.max=20" line774="    //% subcategory=&quot;Classification&quot;" line775="    export function MaxConfidence(): number {" line776="        if (Current == Functions.Classification) {" line777="            let c = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x02);" line778="            return (c / 10000.0)" line779="        }" line780="        return 0" line781="    }" line782="" line783="    /**" line784="     * TODO: 获取指定ID的的置信度" line785="     */" line786="    //% weight=80 blockId=ConfidenceOfId block=&quot;Confident of ID:$id&quot;" line787="    //% id.defl=1 id.min=1 id.max=20" line788="    //% subcategory=&quot;Classification&quot;" line789="    export function ConfidenceOfIdClassification(id: number): number {" line790="        if (Current == Functions.Classification) {" line791="            let d = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x10 + ((id - 1) * 4))" line792="            return (d / 10000.0)" line793="        }" line794="        return 0" line795="    }" line796="" line797="    //数字识别" line798="    /**" line799="     * TODO: 获取置信度最大的数字" line800="     */" line801="    //% weight=82 blockId=NumberWithMaxConfidence block=&quot;The most confident Number&quot;" line802="    //% subcategory=&quot;Number recognition&quot;" line803="    export function NumberWithMaxConfidence(): number {" line804="        if (Current == Functions.NumberRecognition) {" line805="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01);" line806="        }" line807="        return 0" line808="    }" line809="" line810="    /**" line811="     * TODO: 获取数字识别最大的置信度" line812="     */" line813="    //% weight=81 blockId=MaxConfidenceOfNumber block=&quot;The most confident&quot;" line814="    //% id.defl=1 id.min=1 id.max=5" line815="    //% subcategory=&quot;Number recognition&quot;" line816="    export function MaxConfidenceOfNumber(): number {" line817="        if (Current == Functions.NumberRecognition) {" line818="            let e = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x02);" line819="            return (e / 10000.0)" line820="        }" line821="        return 0" line822="    }" line823="" line824="    /**" line825="     * TODO: 获取指定数字的的置信度" line826="     */" line827="    //% weight=80 blockId=ConfidenceOfNumber block=&quot;Confident of Number:$id&quot;" line828="    //% id.defl=1 id.min=1 id.max=5" line829="    //% subcategory=&quot;Number recognition&quot;" line830="    export function ConfidenceOfNumber(id: number): number {" line831="        if (Current == Functions.NumberRecognition) {" line832="            let f = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x10 + ((id - 1) * 4))" line833="            return (f / 10000.0)" line834="        }" line835="        return 0" line836="    }" line837="" line838="    //路标识别" line839="    /**" line840="     * TODO: 获取置信度最大的路标" line841="     */" line842="    //% weight=82 blockId=LandmarkWithMaxConfidence block=&quot;The most confident Number&quot;" line843="    //% subcategory=&quot;Landmark recognition&quot;" line844="    export function LandmarkWithMaxConfidence(): Landmarks {" line845="        if (Current == Functions.LandmarkRecognition) {" line846="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01);" line847="        }" line848="        return 0" line849="    }" line850="" line851="    /**" line852="     * TODO: 获取路标识别最大的置信度" line853="     */" line854="    //% weight=81 blockId=MaxConfidenceOfLandmark block=&quot;The most confident&quot;" line855="    //% subcategory=&quot;Landmark recognition&quot;" line856="    export function MaxConfidenceOfLandmark(): number {" line857="        if (Current == Functions.LandmarkRecognition) {" line858="            let g = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x02);" line859="            return (g / 10000.0)" line860="        }" line861="        return 0" line862="    }" line863="" line864="    /**" line865="     * TODO: 获取指路标的的置信度" line866="     */" line867="    //% weight=80 blockId=ConfidenceOfLandmark block=&quot;Confident of Number:$id&quot;" line868="    //% id.defl=1 id.min=1 id.max=5" line869="    //% subcategory=&quot;Landmark recognition&quot;" line870="    export function ConfidenceOfLandmark(id: Landmarks): number {" line871="        if (Current == Functions.LandmarkRecognition) {" line872="            let h = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x10 + ((id - 1) * 4))" line873="            return (h / 10000.0)" line874="        }" line875="        return 0" line876="    }" line877="    //% weight=60 blockId=GetLandmarkObj block=&quot;|$in_|&quot;" line878="    //% subcategory=&quot;Landmark recognition&quot;" line879="    export function LandmarkObj(in_: Landmarks): Landmarks {" line880="        return in_" line881="    }" line882="" line883="    //特征学习" line884="    /**" line885="     * TODO: 获取置信度最大的ID" line886="     */" line887="    //% weight=82 block=&quot;The most confident ID&quot;" line888="    //% id.defl=1 id.min=1 id.max=20" line889="    //% subcategory=&quot;FeatureLearning&quot;" line890="    export function FlMaxConfidenceID(): number {" line891="        if (Current == Functions.FeatureLearning) {" line892="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01);" line893="        }" line894="        return 0" line895="    }" line896="" line897="    /**" line898="     * TODO: 获取最大的置信度" line899="     */" line900="    //% weight=81 block=&quot;The most confident&quot;" line901="    //% id.defl=1 id.min=1 id.max=20" line902="    //% subcategory=&quot;FeatureLearning&quot;" line903="    export function FlMaxConfidence(): number {" line904="        if (Current == Functions.FeatureLearning) {" line905="            let p = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x02);" line906="            return (p / 10000.0)" line907="        }" line908="        return 0" line909="    }" line910="" line911="    /**" line912="     * TODO: 获取指定ID的的置信度" line913="     */" line914="    //% weight=80 block=&quot;Confident of ID:$id&quot;" line915="    //% id.defl=1 id.min=1 id.max=7" line916="    //% subcategory=&quot;FeatureLearning&quot;" line917="    export function FlConfidenceOfId(id: number): number {" line918="        if (Current == Functions.FeatureLearning) {" line919="            let q = ResultBuf.getNumber(NumberFormat.UInt16LE, 0x10 + ((id - 1) * 4))" line920="            return (q / 10000.0)" line921="        }" line922="        return 0" line923="    }" line924="" line925="    //颜色识别" line926="    /**" line927="     * TODO: 是否识别到了色块" line928="     */" line929="    //% weight=99 block=&quot;Is color detected?&quot;" line930="    //% subcategory=&quot;Color detection&quot;" line931="    export function IsDetectedColorblobs(): boolean {" line932="        if (Current == Functions.ColorDetect) {" line933="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01) &gt; 0) {" line934="                return true;" line935="            }" line936="        }" line937="        return false" line938="    }" line939="" line940="    /**" line941="     * TODO: 识别到的色块总数" line942="     */" line943="    //% weight=90 block=&quot;Total number of detected colors&quot;" line944="    //% subcategory=&quot;Color detection&quot;" line945="    export function NumberOfColorblobs(): number {" line946="        if (Current == Functions.ColorDetect) {" line947="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01);" line948="        }" line949="        return 0" line950="    }" line951="" line952="    /**" line953="     * TODO: 是否识别到了指定ID的颜色" line954="     */" line955="    //% weight=80 block=&quot;Is color ID:$id detected&quot;" line956="    //% id.defl=1 id.min=1 id.max=7" line957="    //% subcategory=&quot;Color detection&quot;" line958="    export function isDetectedColorId(id: number): boolean {" line959="        let num4 = NumberOfColorblobs()" line960="        if (Current == Functions.ColorDetect) {" line961="            for (let r = 2; r &lt; 2 + num4; r++) {  // 逐个对比是否有这个id" line962="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, r) == id) {" line963="                    return true;" line964="                }" line965="            }" line966="        }" line967="        return false" line968="    }" line969="" line970="    /**" line971="     * TODO: 返回指定ID颜色的位置数据" line972="     */" line973="    //% weight=75 block=&quot;|$opt| of color ID:|$id| detected&quot;" line974="    //% id.defl=1 id.min=1 id.max=7" line975="    //% opt.defl=Options.Pos_X" line976="    //% subcategory=&quot;Color detection&quot;" line977="    export function XOfColorId(opt: Options, id: number): number {" line978="        let num5 = NumberOfColorblobs()" line979="        if (Current == Functions.ColorDetect) {" line980="            for (let s = 2; s &lt; 2 + num5; s++) {  // 逐个对比是否有这个id" line981="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, s) == id) {" line982="                    return ResultBuf.getNumber(NumberFormat.Int16LE, (0x30 + opt) + ((s - 2) * 16));" line983="                }" line984="            }" line985="        }" line986="        return 0" line987="    }" line988="" line989="    //视觉巡线" line990="    /**" line991="     * TODO: 是否识别到了线" line992="     */" line993="    //% weight=100 block=&quot;Is any line detected?&quot;" line994="    //% subcategory=&quot;LineFollowing&quot;" line995="    export function isDetectedLine(): boolean {" line996="        let num6 = NumberOfLines()" line997="        if (Current == Functions.LineFollowing) {" line998="            if (ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01) &gt; 0) {" line999="                return true;" line1000="            }" line1001="        }" line1002="        return false" line1003="    }" line1004="" line1005="    /**" line1006="     * TODO: 识别到的线总数" line1007="     */" line1008="    //% weight=90 block=&quot;Total number of lines detected&quot;" line1009="    //% subcategory=&quot;LineFollowing&quot;" line1010="    export function NumberOfLines(): number {" line1011="        if (Current == Functions.LineFollowing) {" line1012="            return ResultBuf.getNumber(NumberFormat.UInt8LE, 0x01);" line1013="        }" line1014="        return 0" line1015="    }" line1016="" line1017="    /**" line1018="     * TODO: 是否识别到了指定ID的线" line1019="     */" line1020="    //% weight=85 block=&quot;Is line ID:$id detected?&quot;" line1021="    //% id.defl=1 id.min=1 id.max=3" line1022="    //% subcategory=&quot;LineFollowing&quot;" line1023="    export function isDetectedLineId(id: number): boolean {" line1024="        let num7 = NumberOfLines()" line1025="        if (Current == Functions.LineFollowing) {" line1026="            for (let t = 2; t &lt; 2 + num7; t++) {  // 逐个对比是否有这个id" line1027="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, t) == id) {" line1028="                    return true;" line1029="                }" line1030="            }" line1031="        }" line1032="        return false" line1033="    }" line1034="" line1035="    /**" line1036="     * TODO: 返回指定ID的线的位置数据" line1037="     */" line1038="    //% weight=80 block=&quot;|$opt| of line ID:|$id|&quot;" line1039="    //% id.defl=1 id.min=1 id.max=3" line1040="    //% opt.defl=Line_Options" line1041="    //% subcategory=&quot;LineFollowing&quot;" line1042="    export function StartXOfLineId(opt: Line_Options, id: number): number {" line1043="        let num8 = NumberOfLines()" line1044="        if (Current == Functions.LineFollowing) {" line1045="            for (let u = 2; u &lt; 2 + num8; u++) {  // 逐个对比是否有这个id" line1046="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, u) == id) {" line1047="                    let tmp = ResultBuf.getNumber(NumberFormat.Int16LE, (0x30 + opt) + ((u - 2) * 16))" line1048="                    switch (opt) {" line1049="                        case Line_Options.Angle:" line1050="                            if (tmp &gt; 90) {" line1051="                                return tmp - 180" line1052="                            } else {" line1053="                                return tmp" line1054="                            }" line1055="                        case Line_Options.Offset:" line1056="                            tmp = Math.abs(tmp)" line1057="                            return tmp - 160" line1058="                        default:" line1059="                            return tmp" line1060="                    }" line1061="" line1062="                }" line1063="            }" line1064="        }" line1065="        return 0" line1066="    }" line1067="" line1068="    //AprilTag" line1069="    /**" line1070="     * TODO: 是否识别到了标签" line1071="     */" line1072="    //% weight=99 block=&quot;Is any Tag detected?&quot;" line1073="    //% subcategory=&quot;AprilTag&quot;" line1074="    export function isDetectedAprilTag(): boolean {" line1075="        if (Current == Functions.AprilTag) {" line1076="            if (ResultBuf.getNumber(NumberFormat.Int8LE, 0x01) &gt; 0) {" line1077="                return true" line1078="            }" line1079="        }" line1080="        return false" line1081="    }" line1082="" line1083="    /**" line1084="     * TODO: 识别到的全部标签个数" line1085="     */" line1086="    //% weight=90 block=&quot;Number of all tags detected &quot;" line1087="    //% subcategory=&quot;AprilTag&quot;" line1088="    export function numberAllTagDetected(): number {" line1089="        if (Current == Functions.AprilTag) {" line1090="            return ResultBuf.getNumber(NumberFormat.Int8LE, 0x01)" line1091="        }" line1092="        return 0" line1093="    }" line1094="" line1095="    /**" line1096="     * TODO: 是否识别到了指定ID的标签" line1097="     */" line1098="    //% weight=80 block=&quot;Is tag ID:$id detected?&quot;" line1099="    //% id.defl=1" line1100="    //% subcategory=&quot;AprilTag&quot;" line1101="    export function isDetecteAprilTagId(id: number): boolean {" line1102="        if (Current == Functions.AprilTag) {" line1103="            let num9 = ResultBuf.getNumber(NumberFormat.Int8LE, 0x01)" line1104="            for (let v = 2; v &lt; 2 + num9; v++) {  // 逐个对比是否有这个id" line1105="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, v) == id) {" line1106="                    return true;" line1107="                }" line1108="            }" line1109="        }" line1110="        return false" line1111="    }" line1112="" line1113="    /**" line1114="     * TODO: 识别到的指定ID标签个数" line1115="     */" line1116="    //% weight=70 block=&quot;Number of tag ID:|$id| detected &quot;" line1117="    //% subcategory=&quot;AprilTag&quot;" line1118="    export function numTagIdDetected(id: number): number {" line1119="        let count2 = 0" line1120="        if (Current == Functions.AprilTag) {" line1121="            let num10 = ResultBuf.getNumber(NumberFormat.Int8LE, 0x01)" line1122="            for (let w = 2; w &lt; 2 + num10; w++) {  // 逐个对比是否有这个id" line1123="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, w) == id) {" line1124="                    count2 += 1" line1125="                }" line1126="            }" line1127="        }" line1128="        return count2" line1129="    }" line1130="" line1131="" line1132="    /**" line1133="     * TODO: 返回指定标签的位置数据" line1134="     */" line1135="    //% weight=60 block=&quot;|$opt| of No.|$index| Tag ID:|$id|&quot;" line1136="    //% index.defl=1 index.min=1" line1137="    //% id.defl=0" line1138="    //% subcategory=&quot;AprilTag&quot;" line1139="    export function getTagDataId(opt: AprilTag_Options, index: number, id: number): number {" line1140="        if (Current == Functions.AprilTag) {" line1141="            let num11 = ResultBuf.getNumber(NumberFormat.Int8LE, 0x01)" line1142="            for (let a = 2; a &lt; 2 + num11; a++) {  // 逐个对比是否有这个id" line1143="                if (ResultBuf.getNumber(NumberFormat.UInt8LE, a) == id) {" line1144="                    index -= 1" line1145="                    if (index == 0) {" line1146="                        switch (opt) {" line1147="                            case AprilTag_Options.Pos_X:" line1148="                                return ResultBuf.getNumber(NumberFormat.Int16LE, 0x30 + (32 * (a - 2)));" line1149="                            case AprilTag_Options.Pos_Y:" line1150="                                return ResultBuf.getNumber(NumberFormat.Int16LE, 0x30 + 2 + (32 * (a - 2)));" line1151="                            case AprilTag_Options.Width:" line1152="                                return ResultBuf.getNumber(NumberFormat.UInt16LE, 0x30 + 4 + (32 * (a - 2)));" line1153="                            case AprilTag_Options.Height:" line1154="                                return ResultBuf.getNumber(NumberFormat.UInt16LE, 0x30 + 6 + (32 * (a - 2)));" line1155="                            case AprilTag_Options.X_T:" line1156="                                return ResultBuf.getNumber(NumberFormat.Float32LE, 0x38 + (32 * (a - 2)));" line1157="                            case AprilTag_Options.X_R:" line1158="                                return ResultBuf.getNumber(NumberFormat.Float32LE, 0x38 + 4 + (32 * (a - 2)));" line1159="                            case AprilTag_Options.Y_T:" line1160="                                return ResultBuf.getNumber(NumberFormat.Float32LE, 0x38 + 8 + (32 * (a - 2)));" line1161="                            case AprilTag_Options.Y_R:" line1162="                                return ResultBuf.getNumber(NumberFormat.Float32LE, 0x38 + 12 + (32 * (a - 2)));" line1163="                            case AprilTag_Options.Z_T:" line1164="                                return ResultBuf.getNumber(NumberFormat.Float32LE, 0x38 + 16 + (32 * (a - 2)));" line1165="                            case AprilTag_Options.Z_R:" line1166="                                return ResultBuf.getNumber(NumberFormat.Float32LE, 0x38 + 20 + (32 * (a - 2)));" line1167="                        }" line1168="                    } else {" line1169="                        if (index &lt;= 0) {" line1170="                            return 0;" line1171="                        }" line1172="                    }" line1173="                }" line1174="            }" line1175="        }" line1176="        return 0" line1177="    }" line1178="" line1179="    //QrCode" line1180="    /**" line1181="     * TODO: 是否识别到了二维码" line1182="     */" line1183="    //% weight=100 block=&quot;Is any QRcode detected?&quot;" line1184="    //% subcategory=&quot;QRcode scanning&quot;" line1185="    export function isDetectedQrCode(): boolean {" line1186="        if (Current == Functions.QrcodeScan) {" line1187="            if (ResultBuf.getNumber(NumberFormat.Int8LE, 0x01) &gt; 0) {" line1188="                return true;" line1189="            }" line1190="        }" line1191="        return false" line1192="    }" line1193="" line1194="    /**" line1195="     * TODO: 是否识别到了指定ID的二维码" line1196="     */" line1197="    //% weight=90 block=&quot;是否识别到了ID:$id二维码&quot;" line1198="    //% id.defl=1 id.min=1 id.max=5" line1199="    //% subcategory=&quot;QRcode scanning&quot;" line1200="    // export function isDetecteQrCodeId(id:number): boolean {" line1201="    // let num = NumberOfLines()" line1202="    // if(Current == Functions.QrcodeScan){" line1203="    // for(let i = 2; i &lt; num; i++){  // 逐个对比是否有这个id" line1204="    // if(ResultBuf.getNumber(NumberFormat.UInt8LE, i) == id){" line1205="    // return true;" line1206="    // }" line1207="    // }" line1208="    // }" line1209="    // return false" line1210="    // }" line1211="    /**" line1212="     * TODO: 识别到的二维码的数据长度" line1213="     */" line1214="    //% weight=80 block=&quot;Data length of detected QRcode&quot;" line1215="    //% subcategory=&quot;QRcode scanning&quot;" line1216="    export function LengthOfQrCodeData(): number {" line1217="        if (Current == Functions.QrcodeScan) {" line1218="            return ResultBuf.getNumber(NumberFormat.UInt16LE, 0x20)" line1219="        }" line1220="        return 0" line1221="    }" line1222="" line1223="    /**" line1224="     * TODO: 以字符串形式返回识别到的二维码的数据" line1225="     */" line1226="    //% weight=70 block=&quot;String from the qrcode detected&quot;" line1227="    //% subcategory=&quot;QRcode scanning&quot;" line1228="    export function StringFromQrCodeData(): string {" line1229="        if (Current == Functions.QrcodeScan) {" line1230="            return ResultBuf.slice(0x30, LengthOfQrCodeData()).toString()" line1231="        }" line1232="        return &quot;&quot;" line1233="    }" line1234="" line1235="    /**" line1236="     * TODO: 以数组形式返回识别到的二维码的数据" line1237="     */" line1238="    //% weight=60 block=&quot;Array from the qrcode detected&quot;" line1239="    //% subcategory=&quot;QRcode scanning&quot;" line1240="    export function ArrayFromQrCodeData(): Array&lt;number&gt; {" line1241="        if (Current == Functions.QrcodeScan) {" line1242="            return ResultBuf.slice(0x30, LengthOfQrCodeData()).toArray(NumberFormat.UInt8LE)" line1243="        }" line1244="        return []" line1245="    }" line1246="" line1247="    //" line1248="    //BarCode " line1249="    /**" line1250="     * TODO: 是否识别到了条形码" line1251="     */" line1252="    //% weight=100 block=&quot;Is a Barcode detected?&quot;" line1253="    //% subcategory=&quot;Barcode scanning&quot;" line1254="    export function isDetectedBarCode(): boolean {" line1255="        let num12 = NumberOfLines()" line1256="        if (Current == Functions.BarcodeScan) {" line1257="            if (ResultBuf.getNumber(NumberFormat.Int8LE, 0x01) &gt; 0) {" line1258="                return true" line1259="            }" line1260="        }" line1261="        return false" line1262="    }" line1263="" line1264="    /**" line1265="     * TODO: 是否识别到了指定ID的条形码" line1266="     */" line1267="    //% weight=90 block=&quot;是否识别到了ID:$id条形码&quot;" line1268="    //% id.defl=1 id.min=1 id.max=5" line1269="    //% subcategory=&quot;Barcode scanning&quot;" line1270="    // export function isDetectedBarCodeId(id:number): boolean {" line1271="    //     let num = NumberOfLines()" line1272="    //     if(Current == Functions.BarcodeScan){" line1273="    //         for(let i = 2; i &lt; num; i++){  // 逐个对比是否有这个id" line1274="    //             if(ResultBuf.getNumber(NumberFormat.UInt8LE, i) == id){" line1275="    //                 return true;" line1276="    //             }" line1277="    //         }" line1278="    //     }" line1279="    //     return false" line1280="    // }" line1281="    /**" line1282="     * TODO: 识别到的条形码的数据长度" line1283="     */" line1284="    //% weight=80 block=&quot;Data length of detected Barcode&quot;" line1285="    //% subcategory=&quot;Barcode scanning&quot;" line1286="    export function LengthOfBarCodeData(): number {" line1287="        if (Current == Functions.BarcodeScan) {" line1288="            return ResultBuf.getNumber(NumberFormat.UInt16LE, 0x20)" line1289="        }" line1290="        return 0" line1291="    }" line1292="" line1293="    /**" line1294="     * TODO: 以字符串形式返回识别到的条形码的数据" line1295="     */" line1296="    //% weight=70 block=&quot;String from the barcode detected&quot;" line1297="    //% subcategory=&quot;Barcode scanning&quot;" line1298="    export function StringFromBarCodeData(): string {" line1299="        if (Current == Functions.BarcodeScan) {" line1300="            return ResultBuf.slice(0x30, LengthOfBarCodeData()).toString()" line1301="        }" line1302="        return &quot;&quot;" line1303="    }" line1304="" line1305="    /**" line1306="     * TODO: 以数组形式返回识别到的条形码的数据" line1307="     */" line1308="    //% weight=60 block=&quot;Array from the barcode detected&quot;" line1309="    //% subcategory=&quot;Barcode scanning&quot;" line1310="    export function ArrayFromBarrCodeData(): Array&lt;number&gt; {" line1311="        if (Current == Functions.BarcodeScan) {" line1312="            return ResultBuf.slice(0x30, LengthOfBarCodeData()).toArray(NumberFormat.UInt8LE)" line1313="        }" line1314="        return []" line1315="    }" line1316="" line1317="    function calcFreqPrescaler(freq: number): number {" line1318="        return (25000000 / (freq * chipResolution)) - 1;" line1319="    }" line1320="" line1321="" line1322="    function write(chipAddress: number, register: number, value: number): void {" line1323="        const buffer = pins.createBuffer(2)" line1324="        buffer[0] = register" line1325="        buffer[1] = value" line1326="        pins.i2cWriteBuffer(chipAddress, buffer, false)" line1327="    }" line1328="" line1329="    /**" line1330="         * Used to setup the chip, will cause the chip to do a full reset and turn off all outputs." line1331="         * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line1332="         * @param freq [40-1000] Frequency (40-1000) in hertz to run the clock cycle at; eg: 50" line1333="         */" line1334="    //% block" line1335="    export function init(chipAddress: number = 0x40, newFreq: number = 50) {" line1336="        debug(`Init chip at address ${chipAddress} to ${newFreq}Hz`)" line1337="        const buf4 = pins.createBuffer(2)" line1338="        const freq = (newFreq &gt; 1000 ? 1000 : (newFreq &lt; 40 ? 40 : newFreq))" line1339="        const prescaler = calcFreqPrescaler(freq)" line1340="" line1341="        write(chipAddress, modeRegister1, sleep)" line1342="" line1343="        write(chipAddress, PrescaleReg, prescaler)" line1344="" line1345="        write(chipAddress, allChannelsOnStepLowByte, 0x00)" line1346="        write(chipAddress, allChannelsOnStepHighByte, 0x00)" line1347="        write(chipAddress, allChannelsOffStepLowByte, 0x00)" line1348="        write(chipAddress, allChannelsOffStepHighByte, 0x00)" line1349="" line1350="        write(chipAddress, modeRegister1, wake)" line1351="" line1352="        control.waitMicros(1000)" line1353="        write(chipAddress, modeRegister1, restart)" line1354="    }" line1355="" line1356="    /**" line1357="     * Used to reset the chip, will cause the chip to do a full reset and turn off all outputs." line1358="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line1359="     */" line1360="    //% block" line1361="    //% " line1362="    export function reset(chipAddress: number = 0x40): void {" line1363="        return init(chipAddress, getChipConfig(chipAddress).freq);" line1364="    }" line1365="" line1366="    function getChipConfig(address: number): ChipConfig {" line1367="        for (let b = 0; b &lt; chips.length; b++) {" line1368="            if (chips[b].address === address) {" line1369="                debug(`Returning chip ${b}`)" line1370="                return chips[b]" line1371="            }" line1372="        }" line1373="        debug(`Creating new chip for address ${address}`)" line1374="        const chip = new ChipConfig(address)" line1375="        const index2 = chips.length" line1376="        chips.push(chip)" line1377="        return chips[index2]" line1378="    }" line1379="" line1380="    function calcFreqOffset(freq: number, offset: number) {" line1381="        return ((offset * 1000) / (1000 / freq) * chipResolution) / 10000" line1382="    }" line1383="" line1384="    /**" line1385="     * Used to set the pulse range (0-4095) of a given pin on the PCA9685" line1386="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line1387="     * @param pinNumber The pin number (0-15) to set the pulse range on" line1388="     * @param onStep The range offset (0-4095) to turn the signal on" line1389="     * @param offStep The range offset (0-4095) to turn the signal off" line1390="     */" line1391="    function setPinPulseRange(pinNumber: PinNum = 0, onStep: number = 0, offStep: number = 2048, chipAddress: number = 0x40): void {" line1392="        pinNumber = Math.max(0, Math.min(15, pinNumber))" line1393="        const buffer2 = pins.createBuffer(2)" line1394="        const pinOffset = PinRegDistance * pinNumber" line1395="        onStep = Math.max(0, Math.min(4095, onStep))" line1396="        offStep = Math.max(0, Math.min(4095, offStep))" line1397="" line1398="        debug(`setPinPulseRange(${pinNumber}, ${onStep}, ${offStep}, ${chipAddress})`)" line1399="        debug(`  pinOffset ${pinOffset}`)" line1400="" line1401="        // Low byte of onStep" line1402="        write(chipAddress, pinOffset + channel0OnStepLowByte, onStep &amp; 0xFF)" line1403="" line1404="        // High byte of onStep" line1405="        write(chipAddress, pinOffset + channel0OnStepHighByte, (onStep &gt;&gt; 8) &amp; 0x0F)" line1406="" line1407="        // Low byte of offStep" line1408="        write(chipAddress, pinOffset + channel0OffStepLowByte, offStep &amp; 0xFF)" line1409="" line1410="        // High byte of offStep" line1411="        write(chipAddress, pinOffset + channel0OffStepHighByte, (offStep &gt;&gt; 8) &amp; 0x0F)" line1412="    }" line1413="" line1414="    /**" line1415="     * Used to set the duty cycle (0-100) of a given led connected to the PCA9685" line1416="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line1417="     * @param ledNumber The number (0-15) of the LED to set the duty cycle on" line1418="     * @param dutyCycle The duty cycle (0-100) to set the LED to" line1419="     */" line1420="    //% block" line1421="    //% subcategory=Servo/Motor" line1422="    export function setLedDutyCycle(ledNum: LEDNum = 0, dutyCycle: number, chipAddress: number = 0x40): void {" line1423="        ledNum = Math.max(0, Math.min(15, ledNum))" line1424="        dutyCycle = Math.max(0, Math.min(100, dutyCycle))" line1425="        const pwm = (dutyCycle * (chipResolution - 1)) / 100" line1426="        debug(`setLedDutyCycle(${ledNum}, ${dutyCycle}, ${chipAddress})`)" line1427="        return setPinPulseRange(&lt;number&gt;ledNum, 0, pwm, chipAddress)" line1428="    }" line1429="" line1430="    function degrees180ToPWM(freq: number, degrees: number, offsetStart: number, offsetEnd: number): number {" line1431="        // Calculate the offset of the off point in the freq" line1432="        offsetEnd = calcFreqOffset(freq, offsetEnd)" line1433="        offsetStart = calcFreqOffset(freq, offsetStart)" line1434="        const spread: number = offsetEnd - offsetStart" line1435="        const calcOffset: number = ((degrees * spread) / 180) + offsetStart" line1436="        // Clamp it to the bounds" line1437="        return Math.max(offsetStart, Math.min(offsetEnd, calcOffset))" line1438="    }" line1439="" line1440="    /**" line1441="     * Used to move the given servo to the specified degrees (0-180) connected to the PCA9685" line1442="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line1443="     * @param servoNum The number (1-16) of the servo to move" line1444="     * @param degrees The degrees (0-180) to move the servo to" line1445="     */" line1446="    //% block" line1447="    //% subcategory=Servo/Motor" line1448="    export function setServoPosition(servoNum: LEDNum = 0, degrees: number, chipAddress: number = 0x40): void {" line1449="        const chip2 = getChipConfig(chipAddress)" line1450="        servoNum = Math.max(0, Math.min(15, servoNum))" line1451="        degrees = Math.max(0, Math.min(180, degrees))" line1452="        const servo: ServoConfig = chip2.servos[servoNum]" line1453="        const pwm2 = degrees180ToPWM(chip2.freq, degrees, servo.minOffset, servo.maxOffset)" line1454="        servo.position = degrees" line1455="        servo.debug()" line1456="        return setPinPulseRange(servo.pinNumber, 0, pwm2, chipAddress)" line1457="    }" line1458="" line1459="" line1460="    /**" line1461="     * Single Motor Control" line1462="     * @param speed [-100,100] percent of fullspeed, negative is reverse" line1463="     * @param chipAddress [64,125] The I2C address of your PCA9685; eg: 64" line1464="     */" line1465="    //% block" line1466="    //% subcategory=Servo/Motor" line1467="    export function MotorControl(motor: Motor, speed: number = 0, chipAddress: number = 0x40): void {" line1468="        speed = Math.max(-100, Math.min(100, speed))" line1469="        if (speed &gt; 0) {" line1470="            setLedDutyCycle(2 * motor, 100 - Math.abs(speed), chipAddress)" line1471="            setLedDutyCycle(2 * motor + 1, 100, chipAddress)" line1472="        }" line1473="        else {" line1474="            setLedDutyCycle(2 * motor + 1, 100 - Math.abs(speed), chipAddress)" line1475="            setLedDutyCycle(2 * motor, 100, chipAddress)" line1476="        }" line1477="    }" line1478="" line1479="    /**" line1480="     * Car Translation use Mecanum wheel" line1481="     * @param speed [0,100] percent of fullspeed" line1482="     * @param degrees [0,360] direction of translation" line1483="     * @param chipAddress [64,125] The I2C address of your PCA9685; eg: 64" line1484="     */" line1485="    //% block=&quot;Car Translation speed:$speed degrees:$degrees chipAddress:$chipAddress&quot;" line1486="    //% subcategory=Servo/Motor" line1487="    export function CarTranslation(speed: number = 0, degrees: number = 0, chipAddress: number = 0x40): void {" line1488="        speed = Math.max(0, Math.min(100, speed))" line1489="        degrees = Math.max(0, Math.min(360, degrees))" line1490="        const speed_lim = speed * Math.sin(Math.PI / 4)" line1491="        const rad = Math.PI * degrees / 180" line1492="        const vx = speed_lim * Math.cos(rad)" line1493="        const vy = -speed_lim * Math.sin(rad)" line1494="        MotorControl(Motor.MotorLF, vx - vy, chipAddress)" line1495="        MotorControl(Motor.MotorRF, vx + vy, chipAddress)" line1496="        MotorControl(Motor.MotorLR, vx + vy, chipAddress)" line1497="        MotorControl(Motor.MotorRR, vx - vy, chipAddress)" line1498="    }" line1499="" line1500="" line1501="}" numlines="1502"></mutation></block></statement></block></xml>